package com.binaryme.ScratchTab.Events;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.LinkedList;

/** registers objects, capable to receive message events. Message events are generated by special Message blocks.
 *  can notify all registered object about a new message.  */
public class HeadMessageEventHandler {

	/** put all the head blocks which should be started on "go" click into this list.  */
	private static LinkedList<WeakReference<InterfaceMessageEventReceiver>> messageEventReceivers = new LinkedList<WeakReference<InterfaceMessageEventReceiver>>();

	//INTERACTION
		/** Head blocks, which are executed on start token touch will register themselves using this method. */
		public static synchronized void registerMessageEventReceiver(InterfaceMessageEventReceiver messageReceiver){
			messageEventReceivers.add(new WeakReference<InterfaceMessageEventReceiver>(messageReceiver));
		}
		/** Method executes all registered start-token-heads. Method is used when a start token is touched. */
		public static void fireMessageEvent(String message){
			ArrayList<WeakReference<?>> badReferences = new ArrayList<WeakReference<?>>();
			for(WeakReference<InterfaceMessageEventReceiver> r : messageEventReceivers){
				InterfaceMessageEventReceiver receiver = r.get();
				if(receiver==null){ 
					badReferences.add(r);					//remember bad reference, can't remove from ArrayList while iterating - ConcurrentModificationException 
				}else{
					receiver.onMessageEvent(message);
				}
			}
			//Now when iterating ArrayList is over remove bad references from it
			messageEventReceivers.removeAll(badReferences);
		}
	
}

